#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

#
# Generates random Gaussian-mixture data to test k-Means clustering algorithms
#
# INPUT PARAMETERS:
# ----------------------------------------------------------------------------
# NAME  TYPE   DEFAULT  MEANING
# ----------------------------------------------------------------------------
# nr    Int               1024    Number of examples
# nf    Int               100     Number of features
# nt    Int               5       Number of targets
# X     String            ---     Location to write X data
# Y     String            ---     Location to write Y data
# fmt   Format specifier  csv     Format of output data
# ----------------------------------------------------------------------------
#
# Example:
# hadoop jar SystemDS.jar -f genRandData4Kmeans.dml -nvargs nr=1024 nf=100 nt=1

print ("BEGIN NN CLASSIFICATION GENERATOR SCRIPT");

num_records   = ifdef($nr, 1024);
num_features  = ifdef($nf, 100);
num_targets   = ifdef($nt, 5);

fileX    = ifdef ($X, "X");
fileY    = ifdef ($Y, "Y");
fmt      = ifdef ($fmt, "csv");

# Generate input data
N = num_records # num examples
D = num_features # num features
t = num_targets # num targets
X = rand(rows=N, cols=D, pdf="normal")
classes = round(rand(rows=N, cols=1, min=1, max=t, pdf="uniform"))
Y = matrix(0, rows=N, cols=t)
parfor (i in 1:N) {
  Y[i, as.scalar(classes[i,1])] = 1  # one-hot encoding
}

print ("Writing out the resulting dataset...");

write (X, fileX, format = fmt);
write (Y, fileY, format = fmt);

print ("DONE: NN CLASSIFICATION GENERATOR SCRIPT");

